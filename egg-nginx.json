{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-06-23T20:47:50+02:00",
    "name": "Pterodactyl Nginx Egg v3",
    "author": "YmoT@tuta.com",
    "description": "Pterodactyl Nginx Egg\r\n\r\nThe Pterodactyl Nginx Egg is a web server solution for Pterodactyl, featuring Nginx, PHP, Git support, Cloudflare Tunnel integration, composer and optional WordPress installation. It supports AMD64 & ARM64 architectures and allows users to choose their preferred PHP version (8.0 \u2013 8.4).\r\nKey Features:\r\n\r\n\u2705 Supports multiple PHP versions\r\n\u2705 Git integration for automatic deployment\r\n\u2705 Cloudflare Tunnel support for secure remote access\r\n\u2705 Optional WordPress setup\r\n\u2705 HTTPS configuration support\r\n\u2705 Automatic updates for Git repositories",
    "features": null,
    "docker_images": {
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.4-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.4-latest",
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.3-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.3-latest",
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.2-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.2-latest",
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.1-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.1-latest"
    },
    "file_denylist": [],
    "startup": ".\/start-modules.sh",
    "config": {
        "files": "{\r\n    \"nginx\/conf.d\/default.conf\": {\r\n        \"parser\": \"file\",\r\n        \"find\": {\r\n            \"    listen\": \"    listen {{server.build.default.port}};\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \"Services successfully launched\"\r\n}",
        "logs": "{\r\n    \"location\": \"logs\/latest.log\"\r\n}",
        "stop": "^C & ^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\\/bin\\/bash\r\n\r\n# [SETUP] Install necessary packages\r\necho \"[SETUP] Installing required packages...\"\r\napt-get update -qq > \\/dev\\/null 2>&1 && apt-get install -qq -y git wget php php-sqlite3 php-xml perl fcgiwrap unzip jq > \\/dev\\/null 2>&1\r\n\r\n# Change to server directory\r\ncd \\/mnt\\/server || { echo \"[ERROR] Failed to access \\/mnt\\/server\"; exit 1; }\r\n\r\n# [SETUP] Create necessary folders\r\necho \"[SETUP] Creating necessary folders...\"\r\nmkdir -p logs tmp www nginx || { echo \"[ERROR] Failed to create directories\"; exit 1; }\r\n\r\n# Clone the default repository\r\nGIT_DEFAULT_REPO=\"https:\\/\\/github.com\\/Ym0T\\/pterodactyl-nginx-egg\"\r\necho \"[Git] Cloning default repository: $GIT_DEFAULT_REPO\"\r\ngit clone \"$GIT_DEFAULT_REPO\" \\/mnt\\/server\\/gtemp > \\/dev\\/null 2>&1 || { echo \"[Git] Error: Failed to clone default repository.\"; exit 21; }\r\n\r\n# Copy required files\r\necho \"[Git] Copying required files from the repository...\"\r\ncp -r \\/mnt\\/server\\/gtemp\\/nginx \\/mnt\\/server || { echo \"[Git] Error: Copying 'nginx' folder failed.\"; exit 22; }\r\ncp -r \\/mnt\\/server\\/gtemp\\/php \\/mnt\\/server || { echo \"[Git] Error: Copying 'php' folder failed.\"; exit 22; }\r\ncp -r \\/mnt\\/server\\/gtemp\\/modules \\/mnt\\/server || { echo \"[Git] Error: Copying 'modules' folder failed.\"; exit 22; }\r\ncp \\/mnt\\/server\\/gtemp\\/start-modules.sh \\/mnt\\/server || { echo \"[Git] Error: Copying 'start-modules.sh' failed.\"; exit 22; }\r\ncp \\/mnt\\/server\\/gtemp\\/LICENSE \\/mnt\\/server || { echo \"[Git] Error: Copying 'LICENSE' failed.\"; exit 22; }\r\nchmod +x \\/mnt\\/server\\/start-modules.sh\r\nfind \\/mnt\\/server\\/modules -type f -name \"*.sh\" -exec chmod +x {} \\\\\\;\r\n\r\n# Clean up temporary files\r\nrm -rf \\/mnt\\/server\\/gtemp\r\n\r\n# Ensure only one main option is active\r\nCOUNT_TRUE=$(( ${AZURIOM:-0} + ${LAUNCHER:-0} + ${WORDPRESS:-0} ))\r\nif [[ \"$COUNT_TRUE\" -gt 1 ]]; then echo \"[ERROR] Only one option (AZURIOM, LAUNCHER, WORDPRESS) can be active at a time.\"; exit 1; fi\r\n\r\n# Remove existing configurations in conf.d\r\necho \"[Clean] Removing existing configurations in conf.d folder...\"\r\nrm -rf \\/mnt\\/server\\/nginx\\/conf.d\\/* || { echo \"[Clean] Error: Failed to clean conf.d\"; exit 33; }\r\n\r\n# Define configuration file\r\nCONFIG_FILE=\"default.conf.base\"\r\nif [[ \"${AZURIOM}\" == \"true\" || \"${AZURIOM}\" == \"1\" ]]; then CONFIG_FILE=\"default.conf.azuriom\"; elif [[ \"${LAUNCHER}\" == \"true\" || \"${LAUNCHER}\" == \"1\" ]]; then CONFIG_FILE=\"default.conf.launcher\"; fi\r\nCONFIG_URL=\"https:\\/\\/raw.githubusercontent.com\\/Riptiaz\\/pterodactyl-nginx-egg\\/main\\/nginx\\/conf.d\\/${CONFIG_FILE}\"\r\necho \"[Download] Downloading configuration file: $CONFIG_FILE\"\r\nwget -q -O \\/mnt\\/server\\/nginx\\/conf.d\\/default.conf \"$CONFIG_URL\" || { echo \"[Download] Error: Failed to download $CONFIG_FILE\"; exit 32; }\r\necho \"[Setup] Successfully set up default.conf using $CONFIG_FILE\"\r\n\r\n# Install Azuriom\r\nif [[ \"${AZURIOM}\" == \"true\" || \"${AZURIOM}\" == \"1\" ]]; then rm -rf \\/mnt\\/server\\/www && mkdir -p \\/mnt\\/server\\/www && cd \\/mnt\\/server\\/www && wget -q -O \\/mnt\\/server\\/tmp\\/AzuriomInstaller.zip https:\\/\\/github.com\\/Azuriom\\/AzuriomInstaller\\/releases\\/latest\\/download\\/AzuriomInstaller.zip && unzip -q \\/mnt\\/server\\/tmp\\/AzuriomInstaller.zip -d \\/mnt\\/server\\/www && rm -f \\/mnt\\/server\\/tmp\\/AzuriomInstaller.zip && echo \"[Azuriom] Successfully installed\"; fi\r\n\r\n# Install Launcher\r\nif [[ \"${LAUNCHER}\" == \"true\" || \"${LAUNCHER}\" == \"1\" ]]; then rm -rf \\/mnt\\/server\\/www && mkdir -p \\/mnt\\/server\\/www && cd \\/mnt\\/server\\/www && git clone \"https:\\/\\/github.com\\/Riptiaz\\/CentralCorp-Panel.git\" \\/mnt\\/server\\/www > \\/dev\\/null 2>&1 || { echo \"[Git] Error: git clone failed.\"; exit 14; } ; fi\r\n\r\n# GIT Operations\r\nif [ -n \"${GIT_ADDRESS}\" ]; then [[ ${GIT_ADDRESS} != *.git ]] && GIT_ADDRESS=\"${GIT_ADDRESS}.git\"; if [ -n \"${USERNAME}\" ] && [ -n \"${ACCESS_TOKEN}\" ]; then GIT_DOMAIN=$(echo \"${GIT_ADDRESS}\" | cut -d\\/ -f3); GIT_REPO=$(echo \"${GIT_ADDRESS}\" | cut -d\\/ -f4-); GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@${GIT_DOMAIN}/${GIT_REPO}\"; fi; rm -rf \\/mnt\\/server\\/www && mkdir -p \\/mnt\\/server\\/www && cd \\/mnt\\/server\\/www && git clone ${GIT_ADDRESS} . > \\/dev\\/null 2>&1; else echo \"[Git] No GIT_ADDRESS provided, skipping Git actions.\"; fi\r\n\r\n# Install WordPress\r\nif [[ \"${WORDPRESS}\" == \"true\" || \"${WORDPRESS}\" == \"1\" ]]; then cd \\/mnt\\/server\\/www && wget -q http:\\/\\/wordpress.org\\/latest.tar.gz && tar xzf latest.tar.gz && mv wordpress\\/* . && rm -rf wordpress latest.tar.gz && echo \"[SETUP] WordPress installed: http:\\/\\/ip:port\\/wp-admin\"; elif [ -z \"${GIT_ADDRESS}\" ]; then echo \"<?php phpinfo(); ?>\" > www\\/index.php; fi\r\n\r\necho \"[DONE] Setup completed successfully!\"\r\necho \"[INFO] You can now start the Nginx web server.\"",
            "container": "debian:bookworm-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Enable Auto-Update",
            "description": "Automatically check for updates on startup using the Tavuru API",
            "env_variable": "AUTOUPDATE_STATUS",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Force Auto-Update",
            "description": "Automatically download and apply updates without confirmation (requires Auto-Update enabled)",
            "env_variable": "AUTOUPDATE_FORCE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "PHP Version",
            "description": "Select the correct PHP version! See the tag behind the Docker image.  \r\nExample: Selected image (ghcr.io\/ym0t\/nginx_php:8.4)\r\nEnter in the field: 8.4",
            "env_variable": "PHP_VERSION",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:3",
            "field_type": "text"
        },
        {
            "name": "Wordpress",
            "description": "Enable or disable Wordpress \r\n\r\n0 = false (default) \r\n1 = true",
            "env_variable": "WORDPRESS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Enable LogCleaner Module",
            "description": "Set to true to run the log cleanup module on container startup, or false to disable it.",
            "env_variable": "LOGCLEANER_STATUS",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "boolean"
        },     
        {
            "name": "Enable Git Module",
            "description": "Set to true to enable the Git update module, or false to disable it.",
            "env_variable": "GIT_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Git Repo Address",
            "description": "Git repo to clone\r\n\r\nI.E. https:\/\/github.com\/Ym0T\/pterodactyl-nginx-egg",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Branch",
            "description": "What branch to pull from github.\r\n\r\nDefault is blank to pull the repo default branch",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Enable Cloudflare Tunnel",
            "description": "Set to true to start the Cloudflared tunnel on container startup, or false to skip it.",
            "env_variable": "CLOUDFLARED_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Cloudflared Tunnel Token",
            "description": "The authentication token used to connect to the Cloudflare Tunnel service (typically starts with \"ey...\").",
            "env_variable": "CLOUDFLARED_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|regex:\/^[A-Za-z0-9_-]+$\/",
            "field_type": "text"
        },
        {
            "name": "Enable Composer Module",
            "description": "Enable or disable Composer package installation",
            "env_variable": "COMPOSER_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Composer Packages",
            "description": "Space-separated list of Composer packages to install",
            "env_variable": "COMPOSER_MODULES",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Enable Cron Module",
            "description": "Enable cron job scheduling for automated tasks like Laravel scheduler",
            "env_variable": "CRON_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Cron Config File",
            "description": "Path to crontab configuration file",
            "env_variable": "CRON_CONFIG_FILE",
            "default_value": "/home/container/crontab",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Azuriom",
            "description": "Install Azuriom or no\r\n0 = false (default) \r\n1 = true",
            "env_variable": "AZURIOM",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Launcher panel",
            "description": "Install launcher panel or no\r\n0 = false (default) \r\n1 = true",
            "env_variable": "LAUNCHER",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        }
    ]
}
