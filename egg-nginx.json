{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY Jexactyl PANEL - jexactyl.com",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-08-24T16:56:17+02:00",
    "name": "Nginx",
    "author": "YmoT@tuta.com",
    "description": "Pterodactyl Nginx Egg\r\n\r\nThe Pterodactyl Nginx Egg is a web server solution for Pterodactyl, featuring Nginx, PHP, Git support, Cloudflare Tunnel integration, and optional WordPress installation. It supports AMD64 & ARM64 architectures and allows users to choose their preferred PHP version (8.0 \u2013 8.4).\r\nKey Features:\r\n\r\n\u2705 Supports multiple PHP versions\r\n\u2705 Git integration for automatic deployment\r\n\u2705 Cloudflare Tunnel support for secure remote access\r\n\u2705 Optional WordPress setup\r\n\u2705 HTTPS configuration support\r\n\u2705 Automatic updates for Git repositories",
    "features": null,
    "docker_images": {
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.4-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.4-latest",
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.3-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.3-latest",
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.2-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.2-latest",
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.1-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.1-latest",
        "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.0-latest": "ghcr.io\/riptiaz\/pterodactyl-nginx-egg:8.0-latest"
    },
    "file_denylist": [],
    "startup": "echo \"{{PHP_VERSION}}\" > \"php_version.txt\";\r\n\r\nif [ \"{{GIT_UPDATE}}\" = \"1\" ]; then \r\n    {{STARTUP_COMMAND_GIT}}; \r\nfi;\r\n\r\nif [ \"{{CLOUDFLARED_STATUS}}\" = \"1\" ]; then \r\n    echo \"{{CLOUDFLARED_TOKEN}}\" > \"cloudflared_token.txt\";\r\n    {{STARTUP_COMMAND_CLOUDFLARED}};\r\nfi;\r\n\r\n{{STARTUP_COMMAND}};",
    "config": {
        "files": "{\r\n    \"nginx\/conf.d\/default.conf\": {\r\n        \"parser\": \"file\",\r\n        \"find\": {\r\n            \"    listen\": \"listen {{server.build.default.port}};\"\r\n        }\r\n    },\r\n    \"php\/php.ini\": {\r\n        \"parser\": \"file\",\r\n        \"find\": {\r\n            \"memory_limit =\": \"memory_limit = {{env.memory_limit}};\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \"Services successfully launched\"\r\n}",
        "logs": "{\r\n    \"location\": \"logs\/latest.log\"\r\n}",
        "stop": "^C & ^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# [SETUP] Install necessary packages\r\necho \"[SETUP] Installing required packages...\"\r\napt-get update -qq > \/dev\/null 2>&1 && \\\r\napt-get install -qq -y git wget php php-sqlite3 php-xml perl fcgiwrap unzip jq > \/dev\/null 2>&1\r\n\r\n# Change to server directory\r\ncd \/mnt\/server || { echo \"[ERROR] Failed to access \/mnt\/server\"; exit 1; }\r\n\r\n# [SETUP] Create necessary folders\r\necho \"[SETUP] Creating necessary folders...\"\r\nmkdir -p logs tmp www nginx || { echo \"[ERROR] Failed to create directories\"; exit 1; }\r\n\r\n# Clone the default repository\r\nGIT_DEFAULT_REPO=\"https:\/\/github.com\/Riptiaz\/pterodactyl-nginx-egg\"\r\necho \"[Git] Cloning default repository: $GIT_DEFAULT_REPO\"\r\ngit clone \"$GIT_DEFAULT_REPO\" \/mnt\/server\/gtemp > \/dev\/null 2>&1 || { echo \"[Git] Error: Failed to clone default repository.\"; exit 21; }\r\n\r\n# Copy required files\r\necho \"[Git] Copying required files from the repository...\"\r\ncp -r \/mnt\/server\/gtemp\/nginx \/mnt\/server || { echo \"[Git] Error: Copying 'nginx' folder failed.\"; exit 22; }\r\ncp -r \/mnt\/server\/gtemp\/php \/mnt\/server || { echo \"[Git] Error: Copying 'php' folder failed.\"; exit 22; }\r\n\r\nfor file in nginx.sh pull-git.sh cloudflared.sh LICENSE; do\r\n    cp \"\/mnt\/server\/gtemp\/$file\" \/mnt\/server || { echo \"[Git] Error: Copying '$file' failed.\"; exit 22; }\r\ndone\r\n\r\n# Set execute permissions for scripts\r\nchmod +x \/mnt\/server\/nginx.sh \/mnt\/server\/pull-git.sh \/mnt\/server\/cloudflared.sh\r\n\r\n# Clean up temporary files\r\nrm -rf \/mnt\/server\/gtemp\r\n\r\nCOUNT_TRUE=$(( ${AZURIOM:-0} + ${LAUNCHER:-0} + ${WORDPRESS:-0} ))\r\n\r\nif [[ \"$COUNT_TRUE\" -gt 1 ]]; then\r\n    echo \"[ERROR] Only one option (AZURIOM, LAUNCHER, WORDPRESS) can be active at a time.\"\r\n    exit 1\r\nfi\r\n\r\n# Remove existing configurations in conf.d\r\necho \"[Clean] Removing existing configurations in conf.d folder...\"\r\nrm -rf \/mnt\/server\/nginx\/conf.d\/* || { echo \"[Clean] Error: Failed to clean conf.d\"; exit 33; }\r\n\r\n# Define the correct configuration file based on the selected option\r\nCONFIG_FILE=\"default.conf.base\" # Default config file\r\n\r\nif [[ \"${AZURIOM}\" == \"true\" || \"${AZURIOM}\" == \"1\" ]]; then\r\n    CONFIG_FILE=\"default.conf.azuriom\"\r\nelif [[ \"${LAUNCHER}\" == \"true\" || \"${LAUNCHER}\" == \"1\" ]]; then\r\n    CONFIG_FILE=\"default.conf.launcher\"\r\nfi\r\n\r\n# Download and rename the appropriate configuration file\r\nCONFIG_URL=\"https:\/\/raw.githubusercontent.com\/Riptiaz\/pterodactyl-nginx-egg\/main\/nginx\/conf.d\/${CONFIG_FILE}\"\r\necho \"[Download] Downloading configuration file: $CONFIG_FILE\"\r\nwget -q -O \/mnt\/server\/nginx\/conf.d\/default.conf \"$CONFIG_URL\" || { echo \"[Download] Error: Failed to download $CONFIG_FILE\"; exit 32; }\r\n\r\necho \"[Setup] Successfully set up default.conf using $CONFIG_FILE\"\r\n\r\n\r\n# Install Azuriom if requested\r\nif [[ \"${AZURIOM}\" == \"true\" || \"${AZURIOM}\" == \"1\" ]]; then\r\n    echo \"[Git] Preparing 'www' directory...\"\r\n    rm -rf \/mnt\/server\/www && mkdir -p \/mnt\/server\/www\r\n\r\n    cd \/mnt\/server\/www || { echo \"[Git] Error: Could not access \/mnt\/server\/www\"; exit 1; }\r\n\r\n    # Extract download URL and hash from JSON\r\n    ZIP_URL=\"https:\/\/github.com\/Azuriom\/AzuriomInstaller\/releases\/latest\/download\/AzuriomInstaller.zip\"\r\n    ZIP_FILE=\"\/mnt\/server\/tmp\/AzuriomInstaller.zip\"\r\n\r\n    # Download the ZIP file\r\n    echo \"[Download] Downloading file from $ZIP_URL\"\r\n    wget -q -O $ZIP_FILE $ZIP_URL || { echo \"[Download] Error: Failed to download ZIP file.\"; exit 32; }\r\n\r\n    # Extract ZIP file to the www folder\r\n    echo \"[Extract] Extracting ZIP file to \/mnt\/server\/www\"\r\n    unzip -q $ZIP_FILE -d \/mnt\/server\/www || { echo \"[Extract] Error: Failed to extract ZIP file.\"; exit 34; }\r\n\r\n    # Clean up ZIP files\r\n    rm -f $ZIP_FILE\r\n    echo \"[Azuriom] Successfully installed\"\r\nfi\r\n\r\n# Install Launcher if requested\r\nif [[ \"${LAUNCHER}\" == \"true\" || \"${LAUNCHER}\" == \"1\" ]]; then\r\n    # Ensure the 'www' directory is clean\r\n    echo \"[Git] Preparing 'www' directory...\"\r\n    rm -rf \/mnt\/server\/www && mkdir -p \/mnt\/server\/www\r\n\r\n    cd \/mnt\/server\/www || { echo \"[Git] Error: Could not access \/mnt\/server\/www\"; exit 1; }\r\n    echo \"[Git] Cloning CentralCorp-Panel...\"\r\n    git clone \"https:\/\/github.com\/Riptiaz\/CentralCorp-Panel.git\" \/mnt\/server\/www > \/dev\/null 2>&1 || { echo \"[Git] Error: git clone failed.\"; exit 14; }\r\nfi\r\n\r\n# GIT Operations\r\nif [ -n \"${GIT_ADDRESS}\" ]; then\r\n    # Ensure GIT_ADDRESS ends with .git\r\n    [[ \"${GIT_ADDRESS}\" != *.git ]] && GIT_ADDRESS=\"${GIT_ADDRESS}.git\"\r\n    echo \"[Git] Using repository: $GIT_ADDRESS\"\r\n\r\n    # Handle authentication if credentials are provided\r\n    if [ -n \"${USERNAME}\" ] && [ -n \"${ACCESS_TOKEN}\" ]; then\r\n        GIT_DOMAIN=$(echo \"${GIT_ADDRESS}\" | cut -d\/ -f3)\r\n        GIT_REPO=$(echo \"${GIT_ADDRESS}\" | cut -d\/ -f4-)\r\n        GIT_ADDRESS=\"https:\/\/${USERNAME}:${ACCESS_TOKEN}@${GIT_DOMAIN}\/${GIT_REPO}\"\r\n        echo \"[Git] Using authenticated access.\"\r\n    fi\r\n\r\n    # Ensure the 'www' directory is clean\r\n    echo \"[Git] Preparing 'www' directory...\"\r\n    rm -rf \/mnt\/server\/www && mkdir -p \/mnt\/server\/www\r\n\r\n    cd \/mnt\/server\/www || { echo \"[Git] Error: Could not access \/mnt\/server\/www\"; exit 1; }\r\n\r\n    # Clone or pull repository\r\n    if [ -d .git ]; then\r\n        echo \"[Git] Repository detected, pulling latest changes...\"\r\n        git pull || { echo \"[Git] Error: git pull failed.\"; exit 12; }\r\n    else\r\n        echo \"[Git] Cloning repository...\"\r\n        git clone \"${GIT_ADDRESS}\" . > \/dev\/null 2>&1 || { echo \"[Git] Error: git clone failed.\"; exit 14; }\r\n    fi\r\nelse\r\n    echo \"[Git] No GIT_ADDRESS provided, skipping Git actions.\"\r\nfi\r\n\r\n# Install WordPress if requested\r\nif [[ \"${WORDPRESS}\" == \"true\" || \"${WORDPRESS}\" == \"1\" ]]; then\r\n    echo \"[SETUP] Installing WordPress...\"\r\n    cd \/mnt\/server\/www || exit 1\r\n    wget -q http:\/\/wordpress.org\/latest.tar.gz || { echo \"[SETUP] Error: Downloading WordPress failed.\"; exit 16; }\r\n    tar xzf latest.tar.gz && mv wordpress\/* . && rm -rf wordpress latest.tar.gz\r\n    echo \"[SETUP] WordPress installed: http:\/\/ip:port\/wp-admin\"\r\nfi\r\n\r\necho \"[DONE] Setup completed successfully!\"\r\necho \"[INFO] You can now start the Nginx web server.\"\r\n\r\nif [[ $? -ne 0 ]]; then\r\n    echo \"[ERROR] The installation failed due to an error above.\"\r\n    exit 1\r\nfi",
            "container": "debian:bookworm-slim",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "PHP Version",
            "description": "Select the correct PHP version! See the tag behind the Docker image.  \r\nExample: Selected image (ghcr.io\/ym0t\/nginx_php:8.4)\r\nEnter in the field: 8.4",
            "env_variable": "PHP_VERSION",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:3",
            "field_type": "text"
        },
        {
            "name": "Wordpress",
            "description": "Enable or disable Wordpress \r\n\r\n0 = false (default) \r\n1 = true",
            "env_variable": "WORDPRESS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Memory_limit",
            "description": "Change the memory_limit value from the php.ini file",
            "env_variable": "memory_limit",
            "default_value": "128M",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Startup Command",
            "description": "The startup file for Nginx.",
            "env_variable": "STARTUP_COMMAND",
            "default_value": ".\/nginx.sh",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Git auto update",
            "description": "Enable or disable (pull latest files). 1 = on and 0 = off",
            "env_variable": "GIT_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Startup Command Git",
            "description": "The startup file for Git.",
            "env_variable": "STARTUP_COMMAND_GIT",
            "default_value": ".\/pull-git.sh",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Git Repo Address",
            "description": "Git repo to clone\r\n\r\nI.E. https:\/\/github.com\/Ym0T\/pterodactyl-nginx-egg",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Branch",
            "description": "What branch to pull from github.\r\n\r\nDefault is blank to pull the repo default branch",
            "env_variable": "BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Username",
            "description": "Username to auth with git.",
            "env_variable": "USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Git Access Token",
            "description": "Password to use with git.\r\n\r\nIt's best practice to use a Personal Access Token.\r\nhttps:\/\/github.com\/settings\/tokens\r\nhttps:\/\/gitlab.com\/-\/profile\/personal_access_tokens",
            "env_variable": "ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Cloudflare Tunnel",
            "description": "Activate or deactivate cloudflared - https:\/\/developers.cloudflare.com\/cloudflare-one\/connections\/connect-networks\/",
            "env_variable": "CLOUDFLARED_STATUS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Cloudflare Tunnel token",
            "description": "The authentication token required to connect to Cloudflare's Tunnel service typically starts with ey....",
            "env_variable": "CLOUDFLARED_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|regex:\/^[A-Za-z0-9_-]+$\/",
            "field_type": "text"
        },
        {
            "name": "Startup command Cloudflared",
            "description": "The startup file for Cloudflared.",
            "env_variable": "STARTUP_COMMAND_CLOUDFLARED",
            "default_value": ".\/cloudflared.sh",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string",
            "field_type": "text"
        },
        {
            "name": "Azuriom",
            "description": "Install Azuriom or no\r\n0 = false (default) \r\n1 = true",
            "env_variable": "AZURIOM",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Launcher panel",
            "description": "Install launcher panel or no\r\n0 = false (default) \r\n1 = true",
            "env_variable": "LAUNCHER",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        }
    ]
}